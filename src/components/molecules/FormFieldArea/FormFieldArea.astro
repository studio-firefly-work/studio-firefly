---
import FormFieldText from '@/components/molecules/FormFieldText/FormFieldText.astro'
import FormFieldTextarea from '@/components/molecules/FormFieldTextarea/FormFieldTextarea.astro'
import FormFieldCheckbox from '@/components/molecules/FormFieldCheckbox/FormFieldCheckbox.astro'

interface Props {
  fields: Theme.FormField[]
  mode?: string
  turnstyle?: boolean
}

const { fields, mode = 'input', turnstyle = false } = Astro.props
const turnstileSiteKey: string = import.meta.env.PUBLIC_TURNSTYLE_SITE_KEY
---

<div class="grid gap-2">
  {
    fields.map((field: any) => {
      if (mode == 'input') {
        switch (field.type) {
          case 'textarea':
            return <FormFieldTextarea {...field} />
          case 'checkbox':
            return <FormFieldCheckbox {...field} />
          default:
            return <FormFieldText {...field} />
        }
      } else if (mode == 'confirm') {
        return (
          <div class="form-control w-full">
            {field.label && <p class="label label-text">{field.label.text}</p>}
            <p x-html={field.id} />
          </div>
        )
      }
    })
  }
  {
    turnstyle && (
      <>
        <div class="cf-turnstile mt-2" />
        <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" />
        <script is:inline define:vars={{ turnstileSiteKey }}>
          turnstile.ready(function ()
          {turnstile.render('.cf-turnstile', {
            sitekey: turnstileSiteKey,
            callback: function () {
              const element = document.querySelector('.cf-turnstile')
              const xData = Alpine.$data(element)
              delete xData.errors.turnstile
            },
          })}
          )
        </script>
      </>
    )
  }
</div>
