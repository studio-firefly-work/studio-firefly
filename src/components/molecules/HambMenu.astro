---
import ButtonLoginOrProfile from '@/components/molecules/ButtonLoginOrProfile.astro'
import ButtonThemeToggle from '@/components/molecules/ButtonThemeToggle.astro'
import Icon from '@/components/atoms/Icon.astro'

interface Props {
  menues: Theme.Menu[]
}
const { menues } = Astro.props
---

<div class="drawer">
  <input id="js-hamb-checkbox" type="checkbox" class="drawer-toggle hidden" />
  <button id="js-hamb-button" class="btn btn-ghost drawer-button" aria-controls="js-hamb-nav" aria-expanded="false" aria-label="メニューを開く">
    <Icon name="icon-bars-3" class="h-10 w-10" />
  </button>
  <nav id="js-hamb-nav" class="drawer-side z-50" area-hidden="true">
    <label for="js-hamb-checkbox" aria-label="close sidebar" class="drawer-overlay"></label>
    <ul class="menu min-h-full w-80 bg-base-200 p-4 text-base-content">
      {
        menues.map((menu: Theme.Menu) => (
          <li class="js-hamb-menu hidden">
            <a href={menu.permalink} class="btn btn-ghost justify-start">
              <Icon name={menu.icon} />
              {menu.title}
            </a>
          </li>
        ))
      }
      <li class="js-hamb-menu hidden"><ButtonLoginOrProfile /></li>
      <li class="js-hamb-menu hidden"><ButtonThemeToggle /></li>
    </ul>
  </nav>
</div>

<script>
  // チェックボックスの状態を切り替える関数
  const toggleCheckbox = (checkbox: HTMLInputElement) => {
    checkbox.checked = !checkbox.checked
    checkbox.dispatchEvent(new Event('change', { bubbles: true }))
  }

  // メニューの状態を切り替える関数
  const toggleMenuState = (isExpanded: boolean, button: HTMLButtonElement, nav: HTMLElement, menus: NodeListOf<HTMLLIElement>) => {
    button.setAttribute('aria-expanded', isExpanded.toString())
    button.setAttribute('aria-label', isExpanded ? 'メニューを閉じる' : 'メニューを開く')
    nav.setAttribute('aria-hidden', (!isExpanded).toString())

    if (isExpanded) {
      menus.forEach((menu) => menu.classList.remove('hidden'))
    } else {
      setTimeout(() => {
        menus.forEach((menu) => menu.classList.add('hidden'))
      }, 300)
    }
  }

  // 初期化関数
  const init = () => {
    const checkbox = document.getElementById('js-hamb-checkbox') as HTMLInputElement
    const button = document.getElementById('js-hamb-button') as HTMLButtonElement
    const nav = document.getElementById('js-hamb-nav') as HTMLElement
    const menus = document.querySelectorAll('.js-hamb-menu') as NodeListOf<HTMLLIElement>

    // チェックボックスの状態が変わったとき
    checkbox.addEventListener('change', () => {
      toggleMenuState(checkbox.checked, button, nav, menus)
    })

    // ハンバーガーメニューボタンでハンバーガーメニューを開閉する
    button.addEventListener('click', () => toggleCheckbox(checkbox))

    // Esc押下時ハンバーガーメニューを閉じる
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && checkbox.checked) {
        toggleCheckbox(checkbox)
      }
    })

    // メニュー押下時ハンバーガーメニューを閉じる
    menus.forEach((menu) => menu.addEventListener('click', () => toggleCheckbox(checkbox)))
  }

  // ページ読み込み時とページ遷移時に初期化
  init()
  document.addEventListener('astro:after-swap', init)
</script>
