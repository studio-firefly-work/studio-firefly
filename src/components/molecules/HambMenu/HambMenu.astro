---
import { Icon } from 'astro-icon/components'
import ButtonThemeToggle from '@/components/molecules/ButtonThemeToggle/ButtonThemeToggle.astro'

interface Props {
  links: Theme.Link[]
}
const { links } = Astro.props

const currentPath = Astro.url.pathname
---

<div class="drawer">
  <input id="js-hamb-checkbox" type="checkbox" class="drawer-toggle hidden" />
  <button
    class="btn btn-ghost px-0"
    id="js-hamb-button"
    aria-controls="js-hamb-menu"
    aria-expanded="false"
    aria-label="メニューを開く"
  >
    <label for="js-hamb-checkbox" class="drawer-button cursor-pointer">
      <Icon name="mdi:hamburger-menu" width={40} height={40} />
    </label>
  </button>
  <nav id="js-hamb-menu" class="drawer-side z-50" area-hidden="true">
    <label for="js-hamb-checkbox" aria-label="メニューを閉じる" class="drawer-overlay"></label>
    <ul class="menu min-h-full w-80 bg-base-200 p-4 text-base-content">
      {
        links.map(({ title, icon, permalink }) => (
          <li class="js-hamb-link">
            <a
              href={permalink}
              class:list={['btn btn-ghost justify-start', { 'theme-current-page': currentPath.startsWith(permalink) }]}
            >
              <Icon name={icon} width={28} height={28} aria-hidden="true" />
              {title}
            </a>
          </li>
        ))
      }
      <li><ButtonThemeToggle /></li>
    </ul>
  </nav>
</div>

<style lang="scss">
  .drawer {
    .drawer-toggle {
      // メニューを閉じる時
      ~ .drawer-side {
        li {
          visibility: visible;
          animation: hideMenu 0s linear 0.3s forwards;

          @keyframes hideMenu {
            to {
              visibility: hidden;
            }
          }
        }
      }

      // メニューを開く時
      &:checked ~ .drawer-side {
        li {
          visibility: visible;
          animation: none;
        }
      }
    }
  }
</style>

<script>
  // チェックボックスの状態を切り替える関数
  const toggleCheckbox = (checkbox: HTMLInputElement) => {
    checkbox.checked = !checkbox.checked
    checkbox.dispatchEvent(new Event('change', { bubbles: true }))
  }

  // メニューの状態を切り替える関数
  const toggleMenuState = (isExpanded: boolean, button: HTMLButtonElement, menu: HTMLElement) => {
    button.setAttribute('aria-expanded', isExpanded.toString())
    button.setAttribute('aria-label', isExpanded ? 'メニューを閉じる' : 'メニューを開く')
    menu.setAttribute('aria-hidden', (!isExpanded).toString())
  }

  // 初期化関数
  const init = () => {
    const checkbox = document.getElementById('js-hamb-checkbox') as HTMLInputElement
    const button = document.getElementById('js-hamb-button') as HTMLButtonElement
    const menu = document.getElementById('js-hamb-menu') as HTMLElement
    const links = document.querySelectorAll('.js-hamb-link') as NodeListOf<HTMLLIElement>

    // チェックボックスの状態変化時アクセシビリティ関連のプロパティを切り替える
    checkbox.addEventListener('change', () => {
      toggleMenuState(checkbox.checked, button, menu)
    })

    // Esc押下時メニューを閉じる
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && checkbox.checked) {
        toggleCheckbox(checkbox)
      }
    })

    // リンク押下時メニューを閉じる
    links.forEach((link: HTMLLIElement) => {
      link.addEventListener('click', () => toggleCheckbox(checkbox))
    })
  }

  init()
  document.addEventListener('astro:after-swap', init)
</script>
