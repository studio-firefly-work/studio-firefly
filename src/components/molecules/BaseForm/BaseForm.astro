---
import FormStep from '@/components/molecules/FormStep/FormStep.astro'
import FormFieldText from '@/components/molecules/FormFieldText/FormFieldText.astro'
import FormFieldTextarea from '@/components/molecules/FormFieldTextarea/FormFieldTextarea.astro'

const { fields, steps, ...rest } = Astro.props

const dataStr = fields.map((field: any) => `${field.id}: ''`).join(', ')
const validStr = fields
  .map((field: any) => {
    if (!field.validations || !Array.isArray(field.validations)) {
      return ''
    }

    const validations = field.validations
      .map((validation: any) => {
        return `{ pattern: ${validation.pattern.toString()}, text: '${validation.text}' }`
      })
      .join(', ')

    return `validate${field.id.charAt(0).toUpperCase() + field.id.slice(1)}() {
        const validations = [${validations}]
        let errorText = ''

        ${validations
          .split('}, {')
          .map((_: any, index: any) => {
            return `if (!validations[${index}]['pattern'].test(this.${field.id})) {
              errorText = validations[${index}]['text']
            }`
          })
          .join(' else ')}

        if (errorText) {
          this.errors.${field.id} = errorText
        } else {
          delete this.errors.${field.id}
        }
      },`
  })
  .join('\n')

const xData = `{
  step: 1,
  ${dataStr},
  errors: {
    ${dataStr}
  },
  ${validStr}
}`
---

<div x-data={xData}>
  {steps && <FormStep {steps} />}

  <form {...rest}>
    <div x-show="step == 1">
      {
        fields.map((field: any) => {
          switch (field.type) {
            case 'textarea':
              return <FormFieldTextarea {...field} />
            default:
              return <FormFieldText {...field} />
          }
        })
      }
      <slot />
    </div>

    <div x-show="step == 2">
      <p>test</p>
    </div>
  </form>
</div>
