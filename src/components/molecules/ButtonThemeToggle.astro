---
import { Icon } from 'astro-icon/components'
---

<label class="btn btn-ghost swap swap-rotate" tabindex="0" role="button">
  <input type="checkbox" class="js-theme-checkbox hidden" />
  <Icon name="tabler:sun" class="swap-off" width={28} height={28} />
  <Icon name="tabler:moon" class="swap-on" width={28} height={28}/>
</label>

<script>
  // 全てのチェックボックスの状態を切り替える関数
  const toggleAllCheckboxes = (theme: string, checkboxes: NodeListOf<HTMLInputElement>) => {
    checkboxes.forEach((checkbox: HTMLInputElement) => {
      checkbox.checked = theme == 'dark' ? true : false
    })
  }

  // テーマを取得する関数
  const getTheme = () => {
    // ローカルストレージのテーマを取得
    const savedTheme = localStorage.getItem('theme')
    if (savedTheme) {
      return savedTheme
    }

    // システムのテーマを取得
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    return systemPrefersDark ? 'dark' : 'light'
  }

  // テーマを設定する関数
  const setTheme = (theme: string) => {
    document.documentElement.setAttribute('data-theme', theme)
    localStorage.setItem('theme', theme)
  }

  // 初期化関数
  const init = () => {
    const checkboxes = document.querySelectorAll('.js-theme-checkbox') as NodeListOf<HTMLInputElement>

    // 初期化時テーマを反映する
    let theme = getTheme()
    setTheme(theme)
    toggleAllCheckboxes(theme, checkboxes)

    // チェックボックスの状態変化時テーマを切り替える
    checkboxes.forEach((checkbox: HTMLInputElement) => {
      checkbox.addEventListener('change', () => {
        theme = checkbox.checked ? 'dark' : 'light'
        setTheme(theme)
        toggleAllCheckboxes(theme, checkboxes)
      })
    })
  }

  init()
  document.addEventListener('astro:after-swap', init)
</script>
