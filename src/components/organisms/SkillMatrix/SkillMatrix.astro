---
import { Icon } from 'astro-icon/components'
import '/node_modules/scroll-hint/css/scroll-hint.css'

const skills = [
  {
    name: '.NET MAUI',
    text: 'AndroidとWindowsのクロスプラットフォーム業務用モバイルアプリ開発で1度だけ使用しました。<br/>当時リリースから間もない時期ということもあり情報が少なく苦労しました。<br/>技術選定の縛りが無ければPWAを使用していたと思います。',
    good: 'left-[40%]',
    like: 'bottom-[40%]',
    icon: 'logos:dotnet',
  },
  {
    name: 'Alpine.js',
    text: '本サイトのクライアントサイドでの動的な振る舞いに使用しています。<br/>jQueryと比較して軽量なことと、htmx同様トリガー要素とロジックが近い位置にあることで直感的に理解しやすくデバッグや変更が容易になるため、作業効率と品質の向上に大変重宝しています。',
    good: 'left-[85%]',
    like: 'bottom-[100%]',
    icon: 'devicon:alpinejs',
  },
  {
    name: 'Astro',
    text: '本サイトのフロントエンドとして使用しています。<br />読み込み速度を最大限に高められる点を評価しています。<br/>AHAスタックの中核として静的サイト生成を効率化し、コンポーネントベースでの開発が可能です。<br/>本サイトではviewtransitionsを活用していますが、まだ主流な技術とは言えず、ブラウザ間の互換性やパフォーマンスへの影響を考慮しながら試行錯誤しています。',
    good: 'left-[95%]',
    like: 'bottom-[100%]',
    icon: 'devicon:astro',
  },
  {
    name: 'C#',
    text: '.NET MAUI案件と、業務用デスクトップアプリの製作で計2度使用しました。<br />ElectronやPWAといったWebの技術を用いたデスクトップアプリ開発も可能になっているため、自ら進んで使用する機会は無いと思います。',
    good: 'left-[40%]',
    like: 'bottom-[20%]',
    icon: 'devicon:csharp',
  },
  {
    name: 'Cloudflare',
    text: '本サイト',
    good: 'left-[60%]',
    like: 'bottom-[100%]',
    icon: 'devicon:cloudflare',
  },
  {
    name: 'CSS',
    text: 'CSSそのものよりもSCSSを使用しています。',
    good: 'left-[100%]',
    like: 'bottom-[20%]',
    icon: 'devicon:css3',
  },
  {
    name: 'Docker',
    text: '主にWordPressの開発環境を構築する際に使用しています。',
    good: 'left-[70%]',
    like: 'bottom-[70%]',
    icon: 'devicon:docker',
  },
  {
    name: 'Express',
    text: '本サイトのバックエンドとして当初開発していましたが、フロントエンドをCloudflareへデプロイすると決めた後にバックエンドをHonoで作り直したため、世には出ませんでした。<br/>シンプルで柔軟な反面、ディレクトリ構成やコードの整理を心掛けました。',
    good: 'left-[70%]',
    like: 'bottom-[60%]',
    icon: 'devicon:express',
  },
  {
    name: 'Git',
    text: '特に語ることはありませんが、昔のgit管理されていない案件を引継いだ時にはいつもありがたみを再認識します。',
    good: 'left-[100%]',
    like: 'bottom-[100%]',
    icon: 'devicon:git',
  },
  {
    name: 'HONO',
    text: '本サイトのフォームのバックエンドとして使用しています。<br/>Expressからの乗り換えでしたがCORSなどよく使用するであろう機能がビルトインミドルウェアとして備わっているおかげでつまずくことなく直感的にコーディングできました。',
    good: 'left-[60%]',
    like: 'bottom-[70%]',
    icon: 'logos:hono',
  },
  {
    name: 'HTML',
    text: 'SEO・アクセシビリティを重視し、構造化データマークアップや適切なセマンティクスの使用を常に意識しています。<br/>また、Alpine.js・HTMXを用いたHTMLファーストな開発によって、保守性を考慮した構造を心掛けています。',
    good: 'left-[100%]',
    like: 'bottom-[80%]',
    icon: 'devicon:html5',
  },
  {
    name: 'htmx',
    text: '本サイトのバックエンドとのAPI通信に使用しています。<br/>Alpine.js同様、トリガー要素とロジックが近い位置にあることで直感的に理解しやすくデバッグや変更が容易になるため、作業効率と品質の向上に大変重宝しています。Alpine.js、HTMX、Tailwind CSSを組み合わせて利用する最大のメリットは、HTMLだけで完結する構成が可能である点です。この特性により、以下のような利点があります。デバッグのしやすさHTMLファイルに直接ロジックやスタイルの記述が含まれるため、関連するコードを探す手間が省け、問題の特定が容易になります。見通しの良さ構造（HTML）、動作（JS）、デザイン（CSS）の要素が1つのファイルに集約されているため、コード全体の流れが直感的に把握できます。特に小規模から中規模のプロジェクトでは、構造がシンプルで視覚的に整理されている状態を保つことができます。変更のしやすさHTMLに記述されたコードを変更するだけで、動作やスタイルを素早く調整可能です。これにより、仕様変更や細かな修正が発生した際も、複数のファイルを編集する手間を大幅に削減できます。これらの利点から、Alpine.js、HTMX、Tailwind CSSの組み合わせは、コードの保守性や生産性の向上に大きく寄与するアプローチといえます。',
    good: 'left-[75%]',
    like: 'bottom-[100%]',
    icon: 'devicon:htmx',
  },
  {
    name: 'JavaScript',
    text: 'できる限りAlpine.jsやhtmxを使用し、JSが必要な場合はTypeScriptで書くことで型安全性を確保し、予期しないエラーを減らすよう心掛けています。',
    good: 'left-[100%]',
    like: 'bottom-[50%]',
    icon: 'devicon:javascript',
  },
  {
    name: 'Laravel',
    text: 'Vueのバックエンドとして2度使用しました。',
    good: 'left-[30%]',
    like: 'bottom-[50%]',
    icon: 'devicon:laravel',
  },
  {
    name: 'MySQL',
    text: 'WordPress案件で使用することが多いです。',
    good: 'left-[90%]',
    like: 'bottom-[80%]',
    icon: 'devicon:mysql',
  },
  {
    name: 'Pug',
    text: '過去に1度だけ使用しましたが、今ならAstroを使うことで代替できるため、あまり使う機会はありません。',
    good: 'left-[60%]',
    like: 'bottom-[60%]',
    icon: 'vscode-icons:file-type-pug',
  },
  {
    name: 'PHP',
    text: '主にWordPressの案件で利用しています。<br/>気軽に動作確認ができる軽量さは好きですが、コードの整理を怠ると可読性が下がりがちになるため注意しています。',
    good: 'left-[100%]',
    like: 'bottom-[70%]',
    icon: 'devicon:php',
  },
  {
    name: 'React',
    text: 'AstroのIslandでReactコンポーネントを利用できる点を評価しており、サーバーサイドレンダリングの利点を活かしつつ、動的なインタラクションを提供できる点が気に入っています。',
    good: 'left-[50%]',
    like: 'bottom-[80%]',
    icon: 'devicon:react',
  },
  {
    name: 'SCSS',
    text: 'BEMの設計思想を取り入れ、明確で一貫性のあるクラス命名を心掛けています。<br/>HTMLとの親和性を高めながら、保守性と拡張性を両立するスタイル設計を意識しています。',
    good: 'left-[100%]',
    like: 'bottom-[90%]',
    icon: 'devicon:sass',
  },
  {
    name: 'Tailwind CSS',
    text: 'HTMLファーストなスタイル設計を実現しやすいのが魅力です。<br/>ユーティリティクラスで冗長なCSSを避けつつ、保守性とスピードを両立しています。',
    good: 'left-[90%]',
    like: 'bottom-[100%]',
    icon: 'devicon:tailwindcss',
  },
  {
    name: 'TypeScript',
    text: '静的型付けでコードの信頼性が高まるのが魅力です。<br/>自由度が低いと感じる場面もありますが、その分デバッグにかける時間を減らせています。',
    good: 'left-[80%]',
    like: 'bottom-[90%]',
    icon: 'devicon:typescript',
  },
  {
    name: 'Vue',
    text: 'コンポーネントベースで効率よく開発できる点が気に入っています。<br/>柔軟で小規模なプロジェクトにも適しています。<br/>AstroのIslandでも利用できますが、Islandで使うならReactかな。',
    good: 'left-[70%]',
    like: 'bottom-[80%]',
    icon: 'devicon:vuejs',
  },
  {
    name: 'Wordpress',
    text: '多くの案件で使用してきました。<br/>セキュリティやパフォーマンスの面で課題を感じることもありますが、WordPressのエコシステムは非常に大きく、多くのプラグインが提供されているため、柔軟な開発が可能な点は高く評価します。<br/>CMSとしてのみ利用し、フロントはAstroで構築するといった運用にシフトできないか検討中です。',
    good: 'left-[90%]',
    like: 'bottom-[50%]',
    icon: 'devicon:wordpress',
  },
]

const xData = `
{
  transitionClass(element, addClass, removeClass) {
    if (removeClass) element.classList.remove(...removeClass)
    if (addClass) element.classList.add(...addClass)
  },

  handleViewTransition(startCallback, endCallback) {
    const transition = document.startViewTransition(startCallback)
    return transition.finished.finally(endCallback)
  },

  toggleModal(index, action) {
    const modal = this.$refs['skillModal' + index]
    const modalIcon = this.$refs['skillModalIcon' + index]
    const btnIcon = this.$refs['skillBtnIcon' + index]

    const isOpen = action === 'open'
    const [activeIcon, inactiveIcon] = isOpen ? [btnIcon, modalIcon] : [modalIcon, btnIcon]

    activeIcon.style.viewTransitionName = "modal"

    this.handleViewTransition(() => {
      activeIcon.style.viewTransitionName = null
      inactiveIcon.style.viewTransitionName = "modal"

      if (isOpen) {
        this.transitionClass(activeIcon, ["invisible"], ["visible"])
        this.transitionClass(inactiveIcon, ["visible"], ["invisible"])
      } else {
        this.transitionClass(activeIcon, ["visible"], ["invisible"])
        this.transitionClass(inactiveIcon, ["visible"], ["invisible"])
      }

      isOpen ? modal.showModal() : modal.close()
    }, () => {
      inactiveIcon.style.viewTransitionName = null
    })
  }
}
`
---

<div x-data={xData}>
  <div class="js-scrollable overflow-x-auto p-16">
    <div class="relative h-dvh max-h-[640px] w-full min-w-[640px]">
      <div class="divider divider-horizontal absolute left-1/2 m-0 h-full -translate-x-1/2"></div>
      <div class="divider absolute top-1/2 m-0 w-full -translate-y-1/2"></div>
      <Icon
        name="icon-park-outline:like"
        width={32}
        height={32}
        class="absolute -top-12 left-1/2 -translate-x-1/2 text-pink-500"
      />
      <Icon
        name="icon-park-outline:dislike"
        width={32}
        height={32}
        class="absolute -bottom-12 left-1/2 -translate-x-1/2 text-purple-500"
      />
      <Icon
        name="icon-park-outline:good-two"
        width={32}
        height={32}
        class="absolute -right-12 top-1/2 -translate-y-1/2 text-green-500"
      />
      <Icon
        name="icon-park-outline:bad-two"
        width={32}
        height={32}
        class="absolute -left-12 top-1/2 -translate-y-1/2 text-red-500"
      />
      {
        skills.map((skill, index) => (
          <div class={`${skill.good} ${skill.like} absolute -translate-x-2/4 translate-y-2/4`}>
            <div class="tooltip" data-tip={skill.name}>
              <button
                class="btn btn-circle btn-ghost"
                aria-label={`${skill.name}の説明を開く`}
                x-on:click={`toggleModal(${index}, 'open')`}
              >
                <Icon name={skill.icon} width={28} height={28} x-ref={`skillBtnIcon${index}`} />
              </button>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  {
    skills.map((skill, index) => (
      <dialog
        class="group modal"
        x-ref={`skillModal${index}`}
        x-on:click.self={`toggleModal(${index}, 'close')`}
        x-on:keydown.escape={`toggleModal(${index}, 'close')`}
      >
        <div class="modal-box">
          <div class="mb-6 flex items-center gap-4">
            <Icon name={skill.icon} width={28} height={28} x-ref={`skillModalIcon${index}`} />
            <h3 class="text-xl font-bold">{skill.name}</h3>
          </div>
          <p set:html={skill.text} />
          <button
            class="btn btn-circle btn-ghost btn-sm absolute right-2 top-2 hidden group-open:inline-flex"
            aria-label={`${skill.name}の説明を閉じる`}
            x-on:click={`toggleModal(${index}, 'close')`}
          >
            ✕
          </button>
        </div>
      </dialog>
    ))
  }
</div>

<script>
  import ScrollHint from 'scroll-hint'
  document.addEventListener('astro:page-load', () => {
    if (window.location.pathname === '/skill/') {
      new ScrollHint('.js-scrollable', {
        i18n: {
          scrollable: 'スクロールできます',
        },
      })
    }
  })
</script>
