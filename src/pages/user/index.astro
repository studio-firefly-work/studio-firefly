---
export const prerender = false

import PageLayout from '@/layouts/PageLayout.astro'
import Container from '@/components/atoms/Container.astro'
import Inner from '@/components/atoms/Inner.astro'

const seo: Theme.SEO = {
  title: 'ユーザー',
  description: 'ユーザーページのdescriptionです',
  permalink: ['login'],
  noindex: true,
  nofollow: true,
}
const apiBaseUrl = import.meta.env.PUBLIC_API_BASE_URL
---

<PageLayout {seo}>
  <Container>
    <Inner>
      <button type="button" class="btn btn-neutral">ログアウト</button>
      <p id="user-id"></p>
      <p id="user-email"></p>
    </Inner>
  </Container>
</PageLayout>

<script define:vars={{ apiBaseUrl }}>
  document.addEventListener('astro:page-load', getUser())
  const logoutButton = document.querySelector('button.btn')
  logoutButton.onclick = () => logout()

  // ユーザー情報 取得
  async function getUser() {
    try {
      const res = await fetch(`${apiBaseUrl}/users/me/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      })

      if (!res.ok) {
        switch (res.status) {
          case 400:
            console.warn('リクエストが不正です。詳細:', await res.text())
            break
          case 401:
            console.warn('認証に失敗しました。ログイン情報を確認してください。')
            break
          case 404:
            console.warn('ユーザー情報が見つかりません。')
            break
          case 500:
            console.error('サーバー内部エラーが発生しました。後ほど再試行してください。')
            break
          default:
            console.warn('予期しないステータスコード:', res.status)
            break
        }
        return
      }
      console.info('認証に成功しました。')
      const data = await res.json()
      document.getElementById('user-id').textContent = `ID: ${data.id}`
      document.getElementById('user-email').textContent = `Email: ${data.email}`
    } catch (error) {
      switch (error.name) {
        case 'TypeError':
          console.error('ネットワーク接続に問題があります:', error.message)
          break
        case 'SyntaxError':
          console.error('サーバーからの応答が不正です:', error.message)
          break
        default:
          console.error('予期しないエラーが発生しました:', error.message)
          break
      }
      window.location.href = '/login/'
    }
  }

  // ログアウト
  async function logout() {
    try {
      const res = await fetch(`${apiBaseUrl}/auth/logout/`, {
        method: 'DELETE',
        credentials: 'include',
      })

      const data = await res.json()
      if (!res.ok) {
        console.error('ログアウトに失敗しました：' + data.message)
      } else {
        console.log('ログアウトに成功しました：' + data.message)
        window.location.href = '/login/'
      }
    } catch (error) {
      console.error('通信に失敗しました', error)
    }
  }
</script>
