---
import PageLayout from '@/layouts/PageLayout.astro'
import Container from '@/components/atoms/Container.astro'
import Icon from '@/components/atoms/Icon.astro'
import Inner from '@/components/atoms/Inner.astro'

const seo: Theme.SEO = {
  title: 'スキルセット',
  description: 'スキルセットページのdescriptionです',
  permalink: ['skill'],
  breadcrumb: { skill: 'スキルセット' },
}

const skills = [
  { name: 'C#', text: 'テキスト', good: 'left-[40%]', like: 'bottom-[20%]', icon: 'icon-code-bracket' },
  { name: 'CSS', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[30%]', icon: 'icon-code-bracket' },
  { name: 'Java', text: 'テキスト', good: 'left-[10%]', like: 'bottom-[10%]', icon: 'icon-code-bracket' },
  { name: 'PHP', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[70%]', icon: 'icon-code-bracket' },
  { name: 'XAML', text: 'テキスト', good: 'left-[20%]', like: 'bottom-[20%]', icon: 'icon-code-bracket' },
  { name: 'HTML', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[40%]', icon: 'icon-code-bracket' },
  { name: 'SCSS', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[90%]', icon: 'icon-code-bracket' },
  { name: 'TypeScript', text: 'テキスト', good: 'left-[80%]', like: 'bottom-[90%]', icon: 'icon-code-bracket' },
  { name: 'JavaScript', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[50%]', icon: 'icon-code-bracket' },
  { name: 'Vue', text: 'テキスト', good: 'left-[30%]', like: 'bottom-[90%]', icon: 'icon-code-bracket' },
  { name: 'Git', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[100%]', icon: 'icon-code-bracket' },
  { name: 'React', text: 'テキスト', good: 'left-[60%]', like: 'bottom-[90%]', icon: 'icon-code-bracket' },
  { name: 'Astro', text: 'テキスト', good: 'left-[90%]', like: 'bottom-[100%]', icon: 'icon-code-bracket' },
  { name: 'Docker', text: 'テキスト', good: 'left-[90%]', like: 'bottom-[70%]', icon: 'icon-code-bracket' },
  { name: 'MySQL', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[65%]', icon: 'icon-code-bracket' },
  { name: 'Prisma', text: 'テキスト', good: 'left-[60%]', like: 'bottom-[50%]', icon: 'icon-code-bracket' },
  { name: 'Express', text: 'テキスト', good: 'left-[70%]', like: 'bottom-[80%]', icon: 'icon-code-bracket' },
  { name: '.NET MAUI', text: 'テキスト', good: 'left-[40%]', like: 'bottom-[40%]', icon: 'icon-code-bracket' },
  { name: 'Wordpress', text: 'テキスト', good: 'left-[100%]', like: 'bottom-[60%]', icon: 'icon-code-bracket' },
  { name: 'Tailwind CSS', text: 'テキスト', good: 'left-[80%]', like: 'bottom-[100%]', icon: 'icon-code-bracket' },
  { name: 'SEO', text: 'テキスト', good: 'left-[70%]', like: 'bottom-[70%]', icon: 'icon-code-bracket' },
  { name: 'アクセシビリティ', text: 'テキスト', good: 'left-[40%]', like: 'bottom-[70%]', icon: 'icon-code-bracket' },
]
---

<PageLayout {seo}>
  <Container class="overflow-x-auto">
    <Inner size="slim">
      <div class="relative h-dvh w-full">
        <div class="absolute left-1/2 h-full -translate-x-1/2 transform border-l border-black"></div>
        <div class="absolute top-1/2 w-full -translate-y-1/2 transform border-b border-black"></div>

        {
          skills.map((skill, index) => (
            <div class={`${skill.good} ${skill.like} absolute -translate-x-2/4 translate-y-2/4`}>
              <div class="tooltip" data-tip={skill.name}>
                <button id={`js-skill-btn-${index}`} class="btn btn-circle btn-ghost">
                  <Icon name={skill.icon} />
                </button>
              </div>
            </div>
          ))
        }
      </div>
    </Inner>

    {
      skills.map((skill, index) => (
        <dialog id={`js-skill-modal-${index}`} class="group modal">
          <div class="modal-box">
            <div class="flex items-center gap-4">
              <Icon name={skill.icon} />
              <h3 class="text-lg font-bold">{skill.name}</h3>
            </div>
            <p class="py-4">{skill.text}</p>
            <form method="dialog">
              <button class="btn btn-circle btn-ghost btn-sm absolute right-2 top-2 hidden group-open:inline-flex">✕</button>
            </form>
          </div>
          <form method="dialog" class="modal-backdrop">
            <button tabindex="-1" />
          </form>
        </dialog>
      ))
    }
  </Container>
</PageLayout>

<script>
  const modals = document.querySelectorAll('[id^="js-skill-modal-"]') as NodeListOf<HTMLDialogElement>
  const btns = document.querySelectorAll('[id^="js-skill-btn-"]') as NodeListOf<HTMLButtonElement>

  modals.forEach((modal, index) => {
    // ボタンにクリックイベントリスナーを追加
    btns[index].addEventListener('click', () => {
      modal.showModal()
    })

    // モーダルの状態変化を監視
    const observer = new MutationObserver((mutationsList: MutationRecord[]) => {
      const mutation = mutationsList.find((mutation) => mutation.attributeName === 'open')
      if (mutation) {
        const isOpen = modal.hasAttribute('open')
        handleModalState(modal, btns[index], isOpen)
      }
    })

    // モーダルのopen属性を監視対象に追加
    observer.observe(modal, { attributes: true })
  })

  // モーダルの開閉状態を処理
  const handleModalState = (modal: HTMLDialogElement, btn: HTMLButtonElement, isOpen: boolean) => {
    if (!document.startViewTransition) return

    const modalIcon = modal.querySelector('svg') as SVGElement
    const btnIcon = btn.querySelector('svg') as SVGElement

    const [fromIcon, toIcon, fromClass, toClass] = isOpen ? [btnIcon, modalIcon, 'visible', 'invisible'] : [modalIcon, btnIcon, 'invisible', 'visible']

    fromIcon.style.viewTransitionName = 'modal'

    applyTransition(
      () => {
        fromIcon.style.viewTransitionName = ''
        toIcon.style.viewTransitionName = 'modal'
        btnIcon.classList.remove(fromClass)
        btnIcon.classList.add(toClass)
      },
      () => {
        fromIcon.style.viewTransitionName = ''
        toIcon.style.viewTransitionName = ''
      }
    )
  }

  // アニメーションと終了処理を適用
  const applyTransition = (startCallback: () => void, finishCallback: () => void) => {
    document.startViewTransition(startCallback).finished.finally(finishCallback)
  }
</script>
