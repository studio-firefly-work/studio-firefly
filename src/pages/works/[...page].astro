---
import { utils } from '@/utils'
import { Image } from 'astro:assets'
import type { MarkdownInstance } from 'astro'
import type { GetStaticPathsOptions } from 'astro'
import Inner from '@/components/atoms/Inner.astro'
import PageLayout from '@/layouts/PageLayout.astro'
import Container from '@/components/atoms/Container.astro'
import Pagination from '@/components/molecules/Pagination.astro'

export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
  const pages: MarkdownInstance<Theme.Frontmatter>[] = await Astro.glob<Theme.Frontmatter>('../../content/works/*.md')

  // 新しい順にソート
  pages.sort(utils.post.sortByDate)

  return paginate(pages, { pageSize: 3 })
}
const { page } = Astro.props

const seo: Theme.SEO = {
  title: '制作事例',
  description: '制作事例ページのdescriptionです',
  permalink: page.currentPage == 1 ? ['works'] : ['works', page.currentPage],
  breadcrumb: { works: '制作事例' },
}
---

<PageLayout {seo}>
  <Container>
    <Inner>
      <ul class="grid grid-cols-1 gap-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        {
          page.data.map((post) => (
            <li>
              <a href={`/works/${post.frontmatter.slug}/`} class="group btn card btn-ghost h-full rounded-none bg-base-100 p-0 text-left font-normal shadow-xl">
                <figure class="overflow-hidden">
                  <Image src={utils.getAssetsImage(post.frontmatter.image.src)} alt={post.frontmatter.image.alt} transition:name={`image-${post.frontmatter.slug}`} class="duration-300 group-hover:scale-110" />
                </figure>
                <div class="card-body w-full py-4">
                  <div class="card-actions">
                    <div class="badge badge-outline">{post.frontmatter.category}</div>
                  </div>
                  <h2 class="card-title flex-1 items-start">{post.frontmatter.title}</h2>
                  <time datetime={post.frontmatter.date} class="theme-text-sm text-right">
                    {utils.formatDate(post.frontmatter.date)}
                  </time>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </Inner>
  </Container>

  <Inner class="text-center">
    <Pagination {page} permalink="/works" />
  </Inner>
</PageLayout>

<script>
  import { api } from '@/api'

  const init = async () => {
    if (window.location.pathname === '/works/') {
      const res = await api.auth.isLogin()

      if (!res) {
        // 未ログインなら data-membersonly="true" の要素に lock クラスを付与
        document.querySelectorAll('a[data-membersonly]').forEach((link) => {
          link.classList.add('lock')
        })
      }
    }
  }

  // ページ初期化とページ遷移時の再初期化
  init()
  document.addEventListener('astro:after-swap', init)
</script>

<style lang="scss">
  .lock {
    display:;
  }
</style>
