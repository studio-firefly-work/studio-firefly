---
import PageLayout from '@/layouts/PageLayout.astro'
import Container from '@/components/atoms/Container.astro'
import type { GetStaticPathsOptions } from 'astro'
import ButtonText from '@/components/molecules/ButtonText.astro'
import Inner from '@/components/atoms/Inner.astro'

const permalink = '/works'

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const sites = [
    { name: 'Astroストア', category: 'web', url: 'store' },
    { name: 'Astroグッズ', category: 'fashion', url: 'products' },
    { name: '究極のAstroハンドブック', category: 'products', url: 'join' },
  ]
  return paginate(sites, { pageSize: 12 })
}
const { page } = Astro.props
const totalPages = Math.ceil(page.total / page.size)

const seo: Theme.SEO = {
  title: '制作事例',
  description: '制作事例ページのdescriptionです',
  permalink: page.currentPage == 1 ? ['works'] : ['works', page.currentPage],
  breadcrumb: { works: '制作事例' },
}
---

<PageLayout {seo}>
  <Container>
    <Inner>
      <ul class="grid grid-cols-1 gap-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        {
          page.data.map((site) => (
            <li>
              <a href={`/works/${site.url}/`} class="card rounded-none bg-base-100 shadow-xl">
                <figure>
                  <img src="https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp" alt="Shoes" transition:name={`image-${site.url}`} />
                </figure>
                <div class="card-body">
                  <h2 class="card-title" transition:name={`title-${site.url}`}>
                    {site.name}
                  </h2>
                  <div class="card-actions">
                    <div class="badge badge-outline">{site.category}</div>
                  </div>
                  <p>If a dog chews shoes whose shoes does he choose?</p>
                </div>
              </a>
            </li>
          ))
        }
      </ul>

      <nav class="flex justify-center gap-4" aria-label="Page navigation">
        {page.url.prev ? <ButtonText href={page.url.prev}>Previous</ButtonText> : null}

        {
          [...Array(totalPages)].map((_, index) => {
            const pageNum = index + 1
            const isCurrent = pageNum === page.currentPage
            const pageLink = pageNum === 1 ? permalink : `${permalink}/${pageNum}`

            return (
              <ButtonText href={pageLink} class={isCurrent ? 'pointer-events-none font-bold' : null}>
                {pageNum}
              </ButtonText>
            )
          })
        }

        {page.url.next ? <ButtonText href={page.url.next}>Next</ButtonText> : null}
      </nav>
    </Inner>
  </Container>
</PageLayout>
