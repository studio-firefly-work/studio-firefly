---
import PageLayout from '@/layouts/PageLayout.astro'
import Button from '@/components/atoms/Button/Button.astro'
import type { GetStaticPathsOptions } from 'astro'
import Container from '@/components/atoms/Container/Container.astro'

const permalink = '/works'

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const sites = [
    { name: 'サイト1', category: 'web', url: '#' },
    { name: 'サイト2サイト2サイト2サイト2サイト2サイト2サイト2', category: 'web', url: '#' },
    { name: 'サイト3', category: 'web', url: '#' },
    { name: 'サイト4', category: 'web', url: '#' },
    { name: 'サイト5', category: 'web', url: '#' },
    { name: 'サイト6', category: 'web', url: '#' },
    { name: 'サイト7', category: 'web', url: '#' },
    { name: 'サイト8', category: 'web', url: '#' },
    { name: 'サイト9', category: 'web', url: '#' },
    { name: 'サイト10', category: 'web', url: '#' },
    { name: 'サイト11', category: 'web', url: '#' },
    { name: 'サイト12', category: 'web', url: '#' },
    { name: 'サイト13', category: 'web', url: '#' },
    { name: 'サイト14', category: 'web', url: '#' },
    { name: 'サイト15', category: 'web', url: '#' },
  ]
  return paginate(sites, { pageSize: 12 })
}
const { page } = Astro.props
const totalPages = Math.ceil(page.total / page.size)
---

<PageLayout {permalink}>
  <section>
    <Container>
      <ul class="grid grid-cols-1 gap-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        {
          page.data.map((site) => (
            <li>
              <Button href={site.url} class="h-full flex-col items-start gap-2 bg-white p-4 hover:bg-white/60 dark:bg-slate-800 hover:dark:bg-slate-800/60">
                <h2 class="grow">{site.name}</h2>
                <p>{site.category}</p>
              </Button>
            </li>
          ))
        }
      </ul>

      <nav class="flex justify-center gap-4" aria-label="Page navigation">
        {page.url.prev ? <Button href={page.url.prev}>Previous</Button> : null}

        {
          [...Array(totalPages)].map((_, index) => {
            const pageNum = index + 1
            const isCurrent = pageNum === page.currentPage
            const pageLink = pageNum === 1 ? permalink : `${permalink}/${pageNum}`

            return (
              <Button href={pageLink} class={isCurrent ? 'font-bold' : null}>
                {pageNum}
              </Button>
            )
          })
        }

        {page.url.next ? <Button href={page.url.next}>Next</Button> : null}
      </nav>
    </Container>
  </section>
</PageLayout>
