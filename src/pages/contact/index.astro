---
import PageLayout from '@/layouts/PageLayout.astro'
import Container from '@/components/atoms/Container.astro'
import Inner from '@/components/atoms/Inner.astro'
import ContactForm from '@/components/organisms/ContactForm.tsx'

const seo: Theme.SEO = {
  title: 'お問い合わせ',
  description: 'お問い合わせページのdescriptionです',
  permalink: ['contact'],
  breadcrumb: { contact: 'お問い合わせ' },
}
---

<PageLayout {seo}>
  <Container>
    <Inner size="slim">
      <ContactForm client:only="react" />
    </Inner>
  </Container>
</PageLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const formElement = document.getElementById('contact-form') as HTMLFormElement

    if (formElement) {
      // フォーム内のすべての input および textarea 要素に input イベントリスナーを追加
      const formFields = formElement.querySelectorAll('input')
      formFields.forEach((field) => {
        field.addEventListener('input', validateForm)
      })
      // フォームの送信イベントリスナーを追加
      formElement.addEventListener('submit', (event) => {
        event.preventDefault // デフォルトの送信動作を防ぐ
      })
    }
  })
  // フォームのバリデーションを行う関数
  const validateForm = () => {
    const validForm = document.querySelector('form:valid') // 有効なフォームを選択
    const submitButton = document.querySelector<HTMLButtonElement>('button[type="submit"]')

    if (submitButton) {
      // フォームが有効でない場合は送信ボタンを無効化
      submitButton.disabled = !validForm
    }
  }

  // メール送信を行う関数
  const sendEmail = async (data: { [k: string]: FormDataEntryValue }) => {
    const apiUrl = `${import.meta.env.PUBLIC_API}/mail/send`

    const res = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })

    if (!res.ok) {
      const errorData = await res.json()
      throw new Error(errorData.message)
    }

    return res
  }
</script>
